{
  "uid" : "2055aaf2adeb2da7",
  "name" : "课程管理相关接口",
  "fullName" : "TestCase.test_live_class#test_add_course",
  "historyId" : "1aad99ea17fe31d7d3c5a594ea77e5d1",
  "time" : {
    "start" : 1696498123244,
    "stop" : 1696498123573,
    "duration" : 329
  },
  "status" : "failed",
  "statusMessage" : "AssertionError",
  "statusTrace" : "self = <TestCase.test_live_class.TestLiveClass object at 0x00000213241B8C70>\ncase = {'data': '{\"id\":\"\",\\n\"name\":\"aaaaa1\",\\n\"is_live\":1,\\n\"start_time\":\"\",\\n\"end_time\":\"\"}', 'header': '{\"Content-Type\"\\n:\"application/json\"}', 'url': '/api/admin/course_config/add', '用例标题': '直播课程类型添加', ...}\n\n    @allure.title('课程管理相关接口')\n    @pytest.mark.parametrize('case',all_case)\n    def test_add_course(self,case):\n        url = case['url']\n        get_method = case['请求方式']\n        data = case['data'].encode('utf-8')\n        get_header = eval(case['header'])\n        code = case['预期状态码']\n        key = 'wm-live-api'\n        print(type(case),url,get_method,get_header,code)\n        if get_method == 'post':\n            res = RequestBase().send_post(url=url,data=data,key=key,cookie=None,header=get_header)\n        else:\n            res = RequestBase().send_get(url=url,params=data,key=key,cookie=None,header=get_header)\n        test_assert = Assert()\n        res = res.json()\n        res_code = res['code']\n>       assert test_assert.assertCode(res_code, code)\n\nTestCase\\test_live_class.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Common.handle_assert.Assert object at 0x00000213241B8D00>, code = 370001\nexpected_code = 200\n\n    def assertCode(self,code,expected_code):\n        \"\"\"\n        验证response状态码\n        :param code:\n        :param expected_code:\n        :return:\n        \"\"\"\n        try:\n>           assert code == expected_code\nE           AssertionError\n\nCommon\\handle_assert.py:59: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError",
    "statusTrace" : "self = <TestCase.test_live_class.TestLiveClass object at 0x00000213241B8C70>\ncase = {'data': '{\"id\":\"\",\\n\"name\":\"aaaaa1\",\\n\"is_live\":1,\\n\"start_time\":\"\",\\n\"end_time\":\"\"}', 'header': '{\"Content-Type\"\\n:\"application/json\"}', 'url': '/api/admin/course_config/add', '用例标题': '直播课程类型添加', ...}\n\n    @allure.title('课程管理相关接口')\n    @pytest.mark.parametrize('case',all_case)\n    def test_add_course(self,case):\n        url = case['url']\n        get_method = case['请求方式']\n        data = case['data'].encode('utf-8')\n        get_header = eval(case['header'])\n        code = case['预期状态码']\n        key = 'wm-live-api'\n        print(type(case),url,get_method,get_header,code)\n        if get_method == 'post':\n            res = RequestBase().send_post(url=url,data=data,key=key,cookie=None,header=get_header)\n        else:\n            res = RequestBase().send_get(url=url,params=data,key=key,cookie=None,header=get_header)\n        test_assert = Assert()\n        res = res.json()\n        res_code = res['code']\n>       assert test_assert.assertCode(res_code, code)\n\nTestCase\\test_live_class.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Common.handle_assert.Assert object at 0x00000213241B8D00>, code = 370001\nexpected_code = 200\n\n    def assertCode(self,code,expected_code):\n        \"\"\"\n        验证response状态码\n        :param code:\n        :param expected_code:\n        :return:\n        \"\"\"\n        try:\n>           assert code == expected_code\nE           AssertionError\n\nCommon\\handle_assert.py:59: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "1a5d39b3193ddea7",
      "name" : "log",
      "source" : "1a5d39b3193ddea7.txt",
      "type" : "text/plain",
      "size" : 134
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true,
    "stepsCount" : 0
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "feature",
    "value" : "课程管理"
  }, {
    "name" : "epic",
    "value" : "直播项目"
  }, {
    "name" : "parentSuite",
    "value" : "TestCase"
  }, {
    "name" : "suite",
    "value" : "test_live_class"
  }, {
    "name" : "subSuite",
    "value" : "TestLiveClass"
  }, {
    "name" : "host",
    "value" : "MS-MHBZJMSYRUBS"
  }, {
    "name" : "thread",
    "value" : "11684-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "TestCase.test_live_class"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "case",
    "value" : "{'用例编号': 'live_class_001', '用例标题': '直播课程类型添加', 'url': '/api/admin/course_config/add', '请求方式': 'post', 'data': '{\"id\":\"\",\\n\"name\":\"aaaaa1\",\\n\"is_live\":1,\\n\"start_time\":\"\",\\n\"end_time\":\"\"}', 'header': '{\"Content-Type\"\\n:\"application/json\"}', '预期状态码': 200, '预期结果': '添加成功'}"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "2055aaf2adeb2da7.json",
  "parameterValues" : [ "{'用例编号': 'live_class_001', '用例标题': '直播课程类型添加', 'url': '/api/admin/course_config/add', '请求方式': 'post', 'data': '{\"id\":\"\",\\n\"name\":\"aaaaa1\",\\n\"is_live\":1,\\n\"start_time\":\"\",\\n\"end_time\":\"\"}', 'header': '{\"Content-Type\"\\n:\"application/json\"}', '预期状态码': 200, '预期结果': '添加成功'}" ]
}